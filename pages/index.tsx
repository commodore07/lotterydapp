import { useAddress, useContract, useMetamask, useDisconnect, useContractMetadata, useContractRead, useContractWrite } from '@thirdweb-dev/react';
import Head from 'next/head';
import Image from 'next/image';
import Header from '../components/Header';
import styles from '../styles/Home.module.css';
import Login from "../components/Login";
import PropergateLoadz from "react-spinners/PropagateLoader";
import Loading from "../components/Loading";
import { useEffect, useState } from 'react';
import { ethers } from 'ethers';
import CountDownTimer from '../components/CountDownTimer';
import toast from "react-hot-toast";
import Marquee from 'react-fast-marquee';
import AdminControls from '../components/AdminControls';
import { currency } from '../constants';

export default function Home() {
const address = useAddress();
const [userTickets, setUserTickets] = useState(0);

const { contract, isLoading } = useContract(process.env.NEXT_PUBLIC_LOTTERY_CONTRACT_ADDRESS);

const { data: remainingTickets } = useContractRead(contract, "RemainingTickets");

const { data: CurrentWinningReward } = useContractRead(contract, "CurrentWinningReward");

const { data: ticketPrice } = useContractRead(contract, "ticketPrice");

const { data: ticketCommission } = useContractRead(contract, "ticketCommission");

const { data: expiration } = useContractRead(contract, "expiration");

const { data: tickets } = useContractRead(contract, "getTickets");

const { data: winnings } = useContractRead(contract, "getWinningsForAddress", address);

const { mutateAsync: WithdrawWinnings } = useContractWrite(contract, "WithdrawWinnings");

const { mutateAsync: BuyTickets } = useContractWrite(contract, "BuyTickets");

const { data: lastWinner } = useContractRead(contract, "lastWinner");

const { data: lastWinnerAmount } = useContractRead(contract, "lastWinnerAmount");

const { data: isLotteryOperator } = useContractRead(contract, "lotteryOperator");

const [quantity, setQuantity] = useState(1);

console.log(address);

useEffect(() => {
  if (!tickets) return;
  const totalTickets: string[] = tickets;
  const noOfUserTickets = totalTickets.reduce((total, ticketAdress) => (ticketAdress === address ? total + 1: total), 0);
  setUserTickets(noOfUserTickets);
}, [tickets, address]);

console.log(userTickets);

  const handleClick = async () => {
    if (!ticketPrice) return; 

    const notification = toast.loading("Buying tickets...");

    try {
      const data = await BuyTickets([
        {
          value: ethers.utils.parseEther(
            (Number(ethers.utils.formatEther(ticketPrice)) * quantity).toString()
          ),
        },
      ]);
      toast.success("Tickets purchased sucessfully!", {
        id: notification,
      });

      console.info("contract call success", data);
    } catch(err) {
      toast.error("Oops something went wrong!", {
        id: notification,
      });
      console.error("contract call failure", err);
    }
  };

  const onWithdrawWinnings = async () => {
    const notification = toast.loading("Withdrawing Winnings...");

    try {
      const data = await WithdrawWinnings([{}]);

      toast.success("Winnings withdrawn sucessfully!", {
        id: notification,
      });
    } catch(err) {
      toast.error("Whoops something went wrong!", {
        id: notification,
      });

      console.error("contract call failure", err);
    }
  }

  if(isLoading) return <Loading />;

  if (!address) return <Login />

  return (
    <div className='bg-[#091b18] min-h-screen flex flex-col'>
      <Head>
        <title>Lottery Dapp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
    <div className='flex-1'>
    <Header /> 
    <Marquee className='bg-[#A1F1C] p-5 mb-5' gradient={false} speed={100}>
      <div className='flex space-x-2 mx-10'>
        <h4 className='text-white font-bold'>Last Winner: {lastWinner?.toString()}</h4>
        <h4 className='text-white font-bold'>Previous winnings: {" "}
          {lastWinnerAmount && 
          ethers.utils.formatEther(lastWinnerAmount?.toString())
          }{" "} {currency}{" "}
        </h4>
      </div>
    </Marquee>

    {isLotteryOperator === address && (
      <div className='flex justify-center'>
        <AdminControls />
      </div>
    )}
    
    {winnings > 0 && (
      <div className=' max-w-md md:max-w-2xl lg:max-w-4xl mx-auto mt-5'>
        <button onClick={onWithdrawWinnings} className='p-5 bg-gradient-to-b from-orange-500 to-emerald-600 animate-pulse text-center rounded-xl w-full'>
          <p className='font-bold'>Winner Winner Chicken Dinner!</p>
          <p>Total Winnings: {ethers.utils.formatEther(winnings.toString())}{" "}{currency}</p>
          <br />
          <p className='font-semibold'>Click here to withdraw</p>
        </button>
      </div>
    )}

    {/* The NEXT Draw Box   */}
    <div className='space-y-5 md:space-y-0 m-5 md:flex md:flex-row items-start justify-center md:space-x-5'>
      <div className='stats-container'>
          <h1 className='text-5xl text-white font-semibold text-center'>The NEXT DRAW</h1>
      <div className='flex justify-between p-2 space-x-2'>
        <div className='stats'>
          <h2 className='text-sm'>Total Pool</h2>
          <p className='text-xl'>
            {CurrentWinningReward && ethers.utils.formatEther(CurrentWinningReward.toString())}{" "}
            {currency}
          </p>
        </div>
        <div className='stats'>
            <h2 className='text-sm'>Tickets Remaining</h2>
            <p className='text-xl'>{remainingTickets?.toNumber()}</p>
        </div>
      </div>
      {/* Countdown Timer */}
      <div className='mt-5 mb-3'>
        <CountDownTimer />
      </div>
      </div>

      <div className='stats-container space-y-2'>
          <div className='stats-container'>
              <div className='flex justify-between items-center text-white pb-2'>
                <h2>Price per ticket </h2>
                <p>
                {ticketPrice && ethers.utils.formatEther(ticketPrice.toString())}{" "}
            {currency}
                </p>
              </div>
              <div className='flex text-white items-center space-x-2 bg-[#091B18] border-[#004337] border p-4'>
                <p>TICKETS</p>
                <input className='flex w-full bg-transparent text-right outline-none' type='number' min={1} max={10} value={quantity} onChange={(e) => setQuantity(Number(e.target.value))}/>
              </div>

              <div className='space-y-2 mt-5'>
                <div className='flex items-center justify-between text-emerald-300 text-sm italic font-extrabold'>
                    <p>Total cost of tickets</p>
                    <p>
                    {ticketPrice && Number(ethers.utils.formatEther(ticketPrice.toString())) * quantity}{" "}
            {currency}
                    </p>
                </div>
                <div className='flex items-center justify-between text-emerald-300 text-xs italic'>
                  <p>Service fees</p>
                  <p>
                  {ticketCommission && ethers.utils.formatEther(ticketCommission.toString())}{" "}
                  {currency}
                  </p>
                </div>

                <div className='flex items-center justify-between text-emerald-300 text-xs italic'>
                  <p>+ Network Fees</p>
                  <p>TBC</p>
                </div>
              </div>

              <button disabled={expiration?.toString() < Date.now().toString() || remainingTickets?.toNumber() === 0} onClick={handleClick} className='mt-5 w-full bg-gradient-to-br from-orange-500 to-emerald-600 px-10 py-5 rounded-md text-white shadow-xl disabled:from-gray-600 disabled:text-gray-100 disabled:to-gray-600 disabled:cursor-not-allowed font-semibold'>Buy {quantity} tickets for {ticketPrice && Number(ethers.utils.formatEther(ticketPrice.toString())) * quantity}{" "} {currency}</button>
          </div>

          {userTickets > 0 && (
            <div className='stats'>
              <p className='text-lg mb-2'>You have {userTickets} tickets in this draw</p>
              <div className='flex max-w-sm flex-wrap gap-x-2 gap-y-2'>
                {Array(userTickets).fill("").map((_, index) => (
                  <p key={index} className='text-emerald-300 h-20 w-12 bg-emerald-500/30 rounded-lg flex flex-shrink-0 items-center justify-center text-xs italic'>{index + 1}</p>
                ))}
              </div>
            </div>
          )}
      </div>
    </div> 
    </div>

    {/* The Price per ticket Box   */}  
    <div>

    </div>
    </div>
  )
}
